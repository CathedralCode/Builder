{"name":"Builder","tagline":"Zend framework 2 database layer generator","body":"# Cathedral Builder\r\n\r\nZend framework 2 database layer generator\r\n\r\nCreates classes based on:\r\n\r\n<http://framework.zend.com/manual/2.3/en/user-guide/database-and-models.html>\r\n\r\n## Intalling\r\n\r\nI’m sure most of you can do this, but those that need a little help.\r\n\r\n#### With composer\r\n\r\n1.  Add this project in your composer.json:\r\n\r\n        \"require\": {\r\n            \"cathedral/builder\": \"dev-master\"\r\n        }\r\n\r\n2.  Now tell composer to update by running the command:\r\n\r\n        $ php composer.phar update\r\n\r\n## Basic Usage\r\n\r\nFigure out what module will house your db code e.g. DBLayer\r\n\r\ncreate the Entity & Model namespace dirs\r\n(module/DBLayer/src/DBLayer/{Entity|Model}\r\n\r\nCreate a BuilderManager:\r\n\r\n    $buildManager = new BuilderManager('DBLayer', ’mytable');\r\n\r\nIf you don’t leave off the table argument you can use the nextTable\r\nmethod to loop through all the tables. Handy for batch runs. And\r\nprobably the most common use.\r\n\r\nWith either a table specified or loaded via nextTable, write the files\r\nto disk or display to screen.\r\n\r\n    # Echo to screen\r\n    echo $buildManager->getDataTableCode();\r\n    echo $buildManager->getEntityAbstractCode();\r\n    echo $buildManager->getEntityCode();\r\n\r\n    # Write to file\r\n    echo $buildManager->writeDataTable();\r\n    echo $buildManager->writeEntityAbstract();\r\n    echo $buildManager->writeEntity();\r\n\r\nThats it :)\r\n\r\n## The Generated Files\r\n\r\n### Entity\r\n\r\nThis files is created for you to add any custom stuff you may want for\r\nthat table.\r\n\r\nOn a users table it might be a function that formats the full name to\r\nsome crazy standard.\r\n\r\nSo this file is **NEVER** replaced by the builder.\r\n\r\nSo use it for what ever you need and rest assured the code will not\r\ndisappear.\r\n\r\n### EntityAbstract\r\n\r\nThis is the basic Entity file.\r\n\r\nIf newer version of Builder may replace this with fixes/features/etc\r\n\r\nDon’t edit this file, you changes will be lost!\r\n\r\n### ModelTable\r\n\r\nBasicaly this is a TableGateway, it this the database lifting and\r\nreturns the Entities.\r\n\r\nAgain, Builder checks the version of this and it will be reokaced for\r\nnewer versions.\r\n\r\nDon’t edit.\r\n\r\n### Class Name Conventions\r\n\r\nIf a table name ends in an s, I assume its a plural.\r\n\r\nSo the model will keep the s, but the Entity will drop it.\r\n\r\nE.g.\r\n\r\n    Table users\r\n    Model = UsersTable\r\n    Ebtity = User\r\n\r\n## Requirements\r\n\r\n### Module & Directories\r\n\r\nThe namespace passed to a manger needs to be an existing module.\r\n\r\nIt also needs to have the directories Entity and Model in the\r\nsrc/{ModuleName}/ directory\r\n\r\nThese 2 dirs need to be writable by your web server\r\n\r\nE.G.\r\n\r\n    $buildManager = new BuilderManager(‘DBLayer');\r\n\r\nWill try create the entities and models in:\r\n\r\nmodule/DBLayer/src/DBLayer/Entity\r\n\r\nmodule/DBLayer/src/DBLayer/Model\r\n\r\n### Global Adapter\r\n\r\nBuilder uses the Global Adapter feature\r\n\r\nSimplest way to get set it (i’m my opinion) is to modify the Module.php\r\nin the module where the Data object will be created.\r\n\r\nmodule/DBLayer/Module.php\r\n\r\n    public function onBootstrap(MvcEvent $e) {\r\n    ...\r\n      $adapter = $e->getApplication()\r\n        ->getServiceManager()\r\n        ->get('Zend\\Db\\Adapter\\Adapter');\r\n\r\n      \\Zend\\Db\\TableGateway\\Feature\\GlobalAdapterFeature::setStaticAdapter($adapter);\r\n    ...\r\n    }\r\n\r\nA make sure that this Module is before any other in the list the use the\r\nDBLayer.\r\n\r\n## Feedback\r\n\r\nHey, got any ideas or suggestions to help improve this generator let me.\r\n\r\nEmail me <code@cathedral.co.za>\r\n","google":"UA-3055608-7","note":"Don't delete this file! It's used internally to help with page regeneration."}
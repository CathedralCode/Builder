{"name":"Builder","tagline":"Zend framework 2 database layer generator","body":"Cathedral Builder 0.13.0\r\n========================\r\n\r\nZend framework 2 database layer builder with a simple Web & Console UI and more features.\r\n\r\nCreates classes based on:\r\n\r\n<http://framework.zend.com/manual/2.3/en/user-guide/database-and-models.html>\r\n\r\nRequirements\r\n------------\r\n\r\n-   PHP \\>= 5.4\r\n\r\n-   [Zend Framework 2][1] (latest master)\r\n\r\n    [1]: <mailto:code@cathedral.co.za>\r\n\r\nInstalling\r\n----------\r\n\r\nI’m sure most of you can do this, but those that need a little help.\r\n\r\n#### With composer\r\n\r\n1.  Add this project in your composer.json:\r\n\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    \"require\": {\r\n        \"cathedral/builder\": \">=0.20\"\r\n    }\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n2.  Now tell composer to update by running the command:\r\n\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    $ php composer.phar update\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n### Post installation (Optional)\r\n\r\nEnabling BuilderUI in your `application.config.php` file\r\n\r\n\r\n\treturn array(\r\n\t    'modules' => array(\r\n\t        // ...\r\n\t        'Cathedral',\r\n\t    ),\r\n\t    // ...\r\n\t);\r\n\r\n\r\nBuilderUI has some options to allow you to quickly customise the basic\r\nfunctionality. After Enabling BuilderUI, copy\r\n`./vendor/cathedral/builder/config/builderui.global.php.dist` to\r\n`./config/autoload/builderui.global.php` and change the values as desired.\r\n\r\nThe following options are available:\r\n\r\n-   **namespace** - Module where files will be created and the namespace of the\r\n    created files. Default is `Application`.\r\n    \r\n-   **entitysingular** - On/Off switch for this feature.\r\n\r\n-   **singularignore** - A | delimited list of tables to ignore for EntitySingular. \r\n\r\nBasic Usage\r\n-----------\r\n\r\nBuilder is only used to generate the classes, after that the classes are only\r\ndependent on zf2, so no need to have builder on your production machine as a\r\ndependency.\r\n\r\nFrom v0.12.0 BuilderUI is part of Builder.\r\n\r\n### BuilderUI\r\n\r\n\tOpen http://yoursite/builder\r\n\r\nIf you want builder to save files to disk the directories for Namespace/Entity\r\nand Namespace/Model must be writable by php.\r\n\r\nAnd enjoy.\r\n\r\n### Console\r\n\r\nAnd just for kicks there is even console support.  \r\nThe console UI uses the same config as the Web UI.  \r\nIn the root of your project run the zf|zftool and see the Cathedral options:\r\n\r\nGet info with: `zf table list`\r\n\r\n\tListing of tables\r\n\tbasics\r\n\t\tDataTable     :Ok\r\n\t\tEntityAbstract:Outdated\r\n\t\tEntity        :None\r\n\r\nGenerate with `build (datatable|abstract|entity) <table> [--write|-w]`  \r\nYou can redirect to a file ` > path/to/file.php`  \r\nOr simple use the -w option and builder does it for you.\r\n\r\n### Code\r\n\r\n#### Single Table\r\n\r\nFigure out what module will house your db code e.g. DBLayer\r\n\r\ncreate the Entity & Model namespace dirs\r\n(module/DBLayer/src/DBLayer/{Entity\\|Model}\r\n\r\nUse BuilderManager:\r\n\r\n\r\n\tuse Cathedral\\Builder\\BuilderManager;\r\n\r\n\r\nCreate a BuilderManager:\r\n\r\n\r\n\t$buildManager = new BuilderManager('DBLayer', ’mytable');\r\n\r\n\r\nIf you don’t leave off the table argument you can use the nextTable method to\r\nloop through all the tables. Handy for batch runs. And probably the most common\r\nuse.\r\n\r\nWith either a table specified or loaded via nextTable, write the files to disk\r\nor display to screen.\r\n\r\n\t//Echo to screen\r\n\techo $buildManager->getDataTableCode();\r\n\techo $buildManager->getEntityAbstractCode();\r\n\techo $buildManager->getEntityCode();\r\n\t\r\n\t//Write to file\r\n\t$buildManager->writeDataTable();\r\n\t$buildManager->writeEntityAbstract();\r\n\t$buildManager->writeEntity();\r\n\r\nThats it for the table :)\r\n\r\n#### Loop through Tables\r\n\r\nHandy for updating classes to new version etc… And for many tables a lot less\r\npainful then 3 lines of code per tables :)\r\n\r\nUse BuilderManager:\r\n\r\n\r\n\tuse Cathedral\\Builder\\BuilderManager;\r\n\r\n\r\nCreate a BuilderManager NO table specified:\r\n\r\n\r\n\t$buildManager = new BuilderManager('DBLayer');\r\n\r\n\r\nWrite while loop overwriting current DataTable And EntityAbstract, only create\r\nEntity if not found:\r\n\r\n\r\n\twhile ($buildManager->nextTable()) {\r\n\t    $buildManager->writeDataTable();\r\n\t    $buildManager->writeEntityAbstract();\r\n\t    $buildManager->writeEntity();\r\n\t}\r\n\r\n\r\nThats it for all tables :)\r\n\r\n### Restful\r\n\r\nBuilder now has some a simple Restful interface to tables.\r\n\r\nSupported so far:\r\n\r\n-\tgetList (List tables & list rows in table)\r\n\r\n-\tget (indevidual row from table)\r\n\r\nTo get a list of tables use:\r\n\r\n\tget http://yoursite/builder/rest\r\n\r\nresult:\r\n\r\n\t{\r\n\t\t\"code\": 401,\r\n\t\t\"message\": \"Tabels\",\r\n\t\t\"data\": [\r\n\t\t\t\"cities\",\r\n\t\t\t\"countries\",\r\n\t\t\t\"currencies\",\r\n\t\t\t\"settings\",\r\n\t\t\t\"users\"\r\n\t\t]\t\r\n\t}\r\n\r\nTo list rows in table showing primary key field and value\r\n\r\n\tget http://yoursite/builder/rest/settings\r\n\t\r\nresult:\r\n\r\n\t{\r\n\t\t\"code\": 0,\r\n\t\t\"message\": \"SettingsTable List\",\r\n\t\t\"data\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"currency\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"db_version\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n\r\nList a row:\r\n\r\n\tget http://yoursite/builder/rest/settings/db_version\r\n\t\r\nresult:\r\n\r\n\t{\r\n\t\t\"code\": 0,\r\n\t\t\"message\": \"Setting\",\r\n\t\t\"data\": {\r\n\t\t\t\"name\": \"db_version\",\r\n\t\t\t\"value\": \"1\",\r\n\t\t\t\"created\": \"2014-11-08 05:28:31\",\r\n\t\t\t\"modified\": null\r\n\t\t}\r\n\t}\r\n\r\nFeatures/Conventions (Assumptions)\r\n----------------------------------\r\n\r\n### EntitySingular\r\n\r\nIf a table name is plural, builder will try create the entity as the singular\r\nversion.\r\n\r\nMost common plural/singular conventions are supported.\r\n\r\nE.g.\r\n\r\n\r\n\tTable countries\r\n\tDataTable: CountriesTable\r\n\tEntity: Country\r\n\t\r\n\tTable catches\r\n\tDataTable: CatchesTable\r\n\tEntity: Catch\r\n\t\r\n\tTable users\r\n\tDataTable: UsersTable\r\n\tEntity: User\r\n\r\n\r\n#### Disable\r\n\r\nBut if you want you can also disable it totally.\r\n\r\n\r\n\t// First we create a NameManger\r\n\t$nm = new NameManager('Dossier');\r\n\t\r\n\t// EntitySingular is enabled by default\r\n\t// To check the status use:\r\n\tif ($nm->entitySingular()) {\r\n\t\t// If enabled\r\n\t\t// To disable it:\r\n\t\t$nm->entitySingular(false);\r\n\t} else {\r\n\t\t// If disabled\r\n\t\t// To disable it:\r\n\t\t$nm->entitySingular(true);\r\n\t}\r\n\t\r\n\t// Lets keep it enabled\r\n\t$nm->entitySingular(true);\r\n\r\n\r\n#### Ignore List\r\n\r\nOr add tables to an ignore list to skip a table or two.\r\n\r\n\r\n\t// But lets tell it that a few tables ending in a plural should be ignored\r\n\t// To reset the ignore list pass FALSE\r\n\t$nm->setEntitySingularIgnores(false);\r\n\t\r\n\t// Now lets add our ignore tables\r\n\t// adding cities\r\n\t$nm->setEntitySingularIgnores('table1');\r\n\t\r\n\t// you can add them as an array or | delimited string as well\r\n\t$nm->setEntitySingularIgnores('table1|table2');\r\n\t// OR\r\n\t$nm->setEntitySingularIgnores(array('table1','table2'));\r\n\r\n\r\n### Relations\r\n\r\nIf a field name uses the format fk\\_{table}, I’ll assume it stores the primary\r\nkey of table {table}.\r\n\r\nClass for table containing fk\\_{table}:\r\n\r\nThis will add a new method fetch{Table} that returns an Entity of type {Table}.\r\n\r\nE.g.: Get the User related to a Group\r\n\r\n\r\n\tTable groups which contains users\r\n\tField groups.fk_users\r\n\tMethod:$group->fetchUser()\r\n\tEntity: User\r\n\t...\r\n\r\n\r\nClass for {table}\r\n\r\nThis will add a new methods gather(fk\\_{table}’s Table) that returns Entities of\r\ntype (fk\\_{table}’s Table).\r\n\r\nE.g.: Get all Groups related to a User\r\n\r\n\r\n\t...\r\n\tMethod: $user->gatherGroups()\r\n\tEntities: Group\r\n\r\n\r\n### Events\r\n\r\nThe DataTable triggers events pre & post of insert, update and delete queries.\r\n\r\nTrigger Events\r\n\r\n-   insert.pre\r\n\r\n-   insert.post & commit\r\n\r\n-   insert.pre\r\n\r\n-   insert.post & commit\r\n\r\n-   insert.pre\r\n\r\n-   insert.post & commit\r\n\r\nAs you can see a commit event is only triggered at any post, also post is only\r\ntriggered if successful.\r\n\r\n \r\n\r\nHow to attach to the event?\r\n\r\nMake these changes to:\r\n\r\nModule.php\r\n\r\n\r\n\t...\r\n\tuse Zend\\EventManager\\Event;\r\n\r\n\r\nonBootstrap()\r\n\r\n\r\n\tpublic function onBootstrap(MvcEvent $e) {\r\n\t    ...\r\n\t    $e->getApplication()->getEventManager()->getSharedManager()->attach('Dossier\\Model\\TechniquesTable', 'commit', function(Event $e) {\r\n\t        Debug::dump($e->getName());\r\n\t        Debug::dump(get_class($e->getTarget()));\r\n\t        Debug::dump($e->getParams());\r\n\t    });\r\n\t    ...\r\n\t}\r\n\r\n\r\nAnd that’s how easy it is :)\r\n\r\nBut also keep in mind you can call the enableEvents/disableEvents methods on the\r\nDataTable turn of events for a while :)\r\n\r\n \r\n\r\nThe Generated Files\r\n-------------------\r\n\r\n### Entity\r\n\r\nThis files is created for you to add any custom stuff you may want for that\r\ntable.\r\n\r\nOn a users table it might be a function that formats the full name to some crazy\r\nstandard.\r\n\r\nSo this file is **NEVER** replaced by the builder.\r\n\r\nSo use it for what ever you need and rest assured the code will not disappear.\r\n\r\n### EntityAbstract\r\n\r\nThis is the basic Entity file.\r\n\r\nIf newer version of Builder may replace this with fixes/features/etc\r\n\r\nDon’t edit this file, your changes will be lost!\r\n\r\n### DataTable\r\n\r\nBasically this is a TableGateway, it does the database lifting and returns the\r\nEntities.\r\n\r\nAgain, Builder checks the version of this and it will be replaced with newer\r\nversions.\r\n\r\nDon’t edit.\r\n\r\nRequirements: Runtime\r\n---------------------\r\n\r\n### Module & Directories (Only if you want to write to file)\r\n\r\nThe namespace passed to a manger needs to be an existing module.\r\n\r\nIt also needs to have the directories Entity and Model in the src/{ModuleName}/\r\ndirectory\r\n\r\nThese 2 dirs need to be writable by your web server\r\n\r\nE.G.\r\n\r\n\r\n\t$buildManager = new BuilderManager(‘DBLayer');\r\n\r\n\r\nWill try create the files in:\r\n\r\nmodule/DBLayer/src/DBLayer/Entity\r\n\r\nmodule/DBLayer/src/DBLayer/Model\r\n\r\n### Global Adapter\r\n\r\nBuilder uses the Global Adapter feature\r\n\r\nSimplest way to get set it (I'm my opinion) is to modify the Module.php in the\r\nmodule where the Data object will be created.\r\n\r\nmodule/DBLayer/Module.php\r\n\r\n\r\n\tpublic function onBootstrap(MvcEvent $e) {\r\n\t...\r\n\t  $adapter = $e->getApplication()\r\n\t    ->getServiceManager()\r\n\t    ->get('Zend\\Db\\Adapter\\Adapter');\r\n\t\r\n\t  \\Zend\\Db\\TableGateway\\Feature\\GlobalAdapterFeature::setStaticAdapter($adapter);\r\n\t...\r\n\t}\r\n\r\n\r\nA make sure that this Module is before any other in the list the use the\r\nDBLayer.\r\n\r\nFeedback\r\n--------\r\n\r\nHey, got any ideas or suggestions to help improve this generator let me.\r\n\r\nEmail me <code@cathedral.co.za>","google":"UA-3055608-7","note":"Don't delete this file! It's used internally to help with page regeneration."}